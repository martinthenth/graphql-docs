input CreateUserInput {
  "The first name of the user"
  firstName: String @constraint(required: true)
  "The last name of the user"
  lastName: String @constraint(required: true)
}

input UpdateUserInput {
  "The first name of the user"
  firstName: String
  "The last name of the user"
  lastName: String
}

extend type Mutation {
  "Create a user"
  createUser(
    "Input for creating a user"
    input: CreateUserInput @constraint(required: true)
    "Unique identifier of the request"
    nonce: UUID @constraint(required: true)
  ): User
  "Update a user"
  updateUser(
    "Unique identifier of the user"
    id: UUID @constraint(required: true)
    "Input for updating a user"
    input: UpdateUserInput @constraint(required: true)
    "Unique identifier of the request"
    nonce: UUID @constraint(required: true)
  ): User
  "Delete a user"
  deleteUser(
    "Unique identifier of the user"
    id: UUID @constraint(required: true)
    "Unique identifier of the request"
    nonce: UUID @constraint(required: true)
  ): User
}

extend type Query {
  "Get a user by id"
  getUserById(id: UUID @constraint(required: true)): User
  "List the users"
  listUsers(after: UUID, start: Int, limit: Int): [User]
}

"The user object"
type User {
  "Unique identifier of the user"
  id: UUID
  "First name of the user"
  firstName: String
  "Last name of the user"
  lastName: String
  "Timestamp when the user was created"
  createdAt: DateTime
  "Timestamp when the user was last updated"
  updatedAt: DateTime
  "Timestamp when the user was deleted"
  deletedAt: DateTime
}
